node cpu(gen: bool^2; in: bool^2) returns (out: bool^4);

--gen: 0 read, 1 write
--in: data = 0/1 avec validite == 1
--in: ack = 1 avec validite == 0
--out: type, data, adresse, validite

var ok: bool;

let
out[0] = if ok then true -> gen[0] else false;
out[1] = if ok then true -> gen[1] else false;
out[2] = if ok and out[0] then
                    not out[1]
                else
                    if ok and out[1] then
                        pre out[2]
                    else
                        false;
out[3] = if ok then true else false;

ok = true -> if in[1] and not pre ok then
                true
             else
                if in[0] and not in[1] and not pre ok then
                    true
                else
                    false
;
tel;

------------*****************************************-------------------

node arb(in: bool^3; valid: bool) returns (out: int);

--in: L1_1, L1_2

var
    last: int;
    command: bool;

let
    last = 0 -> if pre out <> 0 then pre out else pre last;
    command = false -> if out <> 0 then true
                else if out = 0 and valid then false
                else if out = 0 and not pre command then false
                else pre command
                ;

    out = 0 -> if pre command then 0
                else if last = 0 then
                    if in[0] then 1
                    else if in[1] then 2
                    else if in[2] then 3
                    else pre out
                else if pre last = 3 and in[0] then 1
                else if pre last = 1 and in[1] then 2
                else if pre last = 2 and in[2] then 3
                else if in[0] and not in[1] and not in[2] then 1
                else if in[1] and not in[2] and not in[0] then 2
                else if in[2] and not in[0] and not in[1] then 3
                else if in[0] and in[1] and not in[2] then 1
                else if in[1] and in[2] and not in[0] then 2
                else if in[2] and in[0] and not in[1] then 3
                else pre out
                ;

tel;

------------*****************************************-------------------

node mem(in: bool^4)returns (out: bool^4);

var reg0, reg1: bool;

let
    reg0 = 0 -> if false -> in[3] and false -> in[0] and not (false -> in[1])
                and false -> in[2] <> pre reg0 then
                    false -> in[2]
                else pre reg0
                ;
    reg1 = 0 -> if false -> in[3] and false -> in[0] and false -> in[1]
                and false -> in[2] <> pre reg1 then
                    false -> in[2]
                else pre reg1
                ;

    out[0] = if false -> pre in[3] then
                    false -> pre in[0]
                else false
            ;
    out[1] = if false -> pre in[3] then
                    false -> pre in[1]
                else false
            ;
    out[2] = if false -> pre in[3] then
                if not (false -> pre in[1]) then
                    pre reg0
                else if false -> pre in[1] then
                    pre reg1
                else false
                else false
            ;
    out[3] = false -> pre in[3]
            ;

tel;

------------*****************************************-------------------

node bus(in_1, in_2, in_3, in_mem: bool^4; arg_gnt: int) returns (out: bool^4);

var temp1, temp2, temp3, temp4: bool^3;

let
    temp1[0] = if false -> in_1[3] then in_1[0]
                    else false -> pre temp1[0];
    temp1[1] = if false -> in_1[3] then in_1[1]
                    else false -> pre temp1[1];
    temp1[2] = if false -> in_1[3] then in_1[2]
                    else false -> pre temp1[2];

    temp2[0] = if false -> in_2[3] then in_2[0]
                    else false -> pre temp2[0];
    temp2[1] = if false -> in_2[3] then in_2[1]
                    else false -> pre temp2[1];
    temp2[2] = if false -> in_2[3] then in_2[2]
                    else false -> pre temp2[2];

    temp3[0] = if false -> in_3[3] then in_3[0]
                    else false -> pre temp3[0];
    temp3[1] = if false -> in_3[3] then in_3[1]
                    else false -> pre temp3[1];
    temp3[2] = if false -> in_3[3] then in_3[2]
                    else false -> pre temp3[2];

    temp4[0] = if false -> in_mem[3] then in_mem[0]
                    else false -> pre temp4[0];
    temp4[1] = if false -> in_mem[3] then in_mem[1]
                    else false -> pre temp4[1];
    temp4[2] = if false -> in_mem[3] then in_mem[2]
                    else false -> pre temp4[2];

    out[0..2] = if arg_gnt = 3 then
                    temp3[0..2]
                else if arg_gnt = 1 then
                    temp1[0..2]
                else if arg_gnt = 2 then
                    temp2[0..2]
                else
                    temp4[0..2]
                ;
    out[3] = (0 -> pre arg_gnt <> 0 and arg_gnt = 0)
                or (0 -> pre arg_gnt = 0 and arg_gnt <> 0)
                ;

tel;

------------*****************************************-------------------

node cache1(in_arb: int; in_cpu: bool^4, in_bus: bool^4)
    returns (out_arb: bool; out_cpu: bool^2; out_bus: bool^4);

var data: bool^2;
    cpu_req: bool^3;
    data_valid: bool;
    requesting: bool;

let

    cpu_req[0] = if in_cpu[3] then in_cpu[0] else pre cpu_req[0]
                    ;
    cpu_req[1] = if in_cpu[3] then in_cpu[1] else pre cpu_req[1]
                    ;
    cpu_req[2] = if in_cpu[3] then in_cpu[2] else pre cpu_req[2]
                    ;

    out_bus[0] = cpu_req[0]
        ;
    out_bus[1] = cpu_req[1]
        ;
    out_bus[2] = cpu_req[2]
        ;
    out_bus[3] = in_cpu[3] and not data_valid
        ;

    data_valid = (cpu_req[1] and data[0]) or (not cpu_req[1] and not data[0])
        ;

    requesting = if out_bus[3] then true
                    else if pre in_arb = 1 and in_arb = 0 and in_bus[3] then false
                    else pre requesting
        ;

    data[0] =
;
    data[1] =
;
    out_cpu[0] = cpu_req[0]
;
    out_cpu[1] = if cpu_req[1] then
;
;
;

tel;

------------*****************************************-------------------






